{"version":3,"sources":["logger.js"],"names":["define","consoleLogger","type","[object Object]","args","this","output","console","apply","Logger","concreteLogger","options","init","prefix","logger","debug","bool","forward","lvl","debugOnly","moduleName"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aACA,MAAMC,GACFC,KAAM,SACNC,IAAIC,GACAC,KAAKC,OAAO,MAAOF,IAEvBD,KAAKC,GACDC,KAAKC,OAAO,OAAQF,IAExBD,MAAMC,GACFC,KAAKC,OAAO,QAASF,IAEzBD,OAAOD,EAAME,GACLG,SAAWA,QAAQL,IACnBK,QAAQL,GAAMM,MAAMD,QAASH,WAGnCK,EACFN,YAAYO,EAAgBC,MACxBN,KAAKO,KAAKF,EAAgBC,GAE9BR,KAAKO,EAAgBC,MACjBN,KAAKQ,OAASF,EAAQE,QAAU,WAChCR,KAAKS,OAASJ,GAAkBT,EAChCI,KAAKM,QAAUA,EACfN,KAAKU,MAAQJ,EAAQI,MAEzBZ,SAASa,GACLX,KAAKU,MAAQC,EAEjBb,OAAOC,GACH,OAAOC,KAAKY,QAAQb,EAAM,MAAO,IAAI,GAEzCD,QAAQC,GACJ,OAAOC,KAAKY,QAAQb,EAAM,OAAQ,IAAI,GAE1CD,SAASC,GACL,OAAOC,KAAKY,QAAQb,EAAM,QAAS,IAEvCD,aAAaC,GACT,OAAOC,KAAKY,QAAQb,EAAM,OAAQ,wBAAwB,GAE9DD,QAAQC,EAAMc,EAAKL,EAAQM,GACvB,OAAIA,IAAcd,KAAKU,MACZ,MACY,iBAAZX,EAAK,KACZA,EAAK,MAASS,IAAWR,KAAKQ,UAAYT,EAAK,MAC5CC,KAAKS,OAAOI,GAAKd,IAE5BD,OAAOiB,GACH,OAAO,IAAIX,EAAOJ,KAAKS,YACdD,UAAYR,KAAKQ,UAAYO,SAC/Bf,KAAKM,WAIpB,OAAO,IAAIF","file":"../logger.js","sourcesContent":["define(function () {\n    'use strict';\n    const consoleLogger = {\n        type: 'logger',\n        log(args) {\n            this.output('log', args);\n        },\n        warn(args) {\n            this.output('warn', args);\n        },\n        error(args) {\n            this.output('error', args);\n        },\n        output(type, args) {\n            if (console && console[type])\n                console[type].apply(console, args);\n        }\n    };\n    class Logger {\n        constructor(concreteLogger, options = {}) {\n            this.init(concreteLogger, options);\n        }\n        init(concreteLogger, options = {}) {\n            this.prefix = options.prefix || 'i18next:';\n            this.logger = concreteLogger || consoleLogger;\n            this.options = options;\n            this.debug = options.debug;\n        }\n        setDebug(bool) {\n            this.debug = bool;\n        }\n        log(...args) {\n            return this.forward(args, 'log', '', true);\n        }\n        warn(...args) {\n            return this.forward(args, 'warn', '', true);\n        }\n        error(...args) {\n            return this.forward(args, 'error', '');\n        }\n        deprecate(...args) {\n            return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);\n        }\n        forward(args, lvl, prefix, debugOnly) {\n            if (debugOnly && !this.debug)\n                return null;\n            if (typeof args[0] === 'string')\n                args[0] = `${ prefix }${ this.prefix } ${ args[0] }`;\n            return this.logger[lvl](args);\n        }\n        create(moduleName) {\n            return new Logger(this.logger, {\n                ...{ prefix: `${ this.prefix }:${ moduleName }:` },\n                ...this.options\n            });\n        }\n    }\n    return new Logger();\n});"]}