{"version":3,"sources":["LanguageUtils.js"],"names":["define","baseLogger","capitalize","string","charAt","toUpperCase","slice","[object Object]","options","this","whitelist","supportedLngs","logger","create","code","indexOf","p","split","length","pop","toLowerCase","formatLanguageCode","join","specialCases","lowerCaseLng","map","part","cleanCode","deprecate","isSupportedCode","load","nonExplicitSupportedLngs","getLanguagePartFromCode","codes","found","forEach","cleanedLng","lngOnly","find","supportedLng","getFallbackCodes","fallbackLng","fallbacks","Object","prototype","toString","apply","default","getScriptPartFromCode","fallbackCode","fallbackCodes","addCode","c","push","warn","fc"],"mappings":";;;;;;;AAAAA,QAAQ,YAAa,SAAUC,GAC3B,aACA,SAASC,EAAWC,GAChB,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,GAmJzD,aAhJIC,YAAYC,GACRC,KAAKD,QAAUA,EACfC,KAAKC,UAAYD,KAAKD,QAAQG,gBAAiB,EAC/CF,KAAKE,cAAgBF,KAAKD,QAAQG,gBAAiB,EACnDF,KAAKG,OAASX,EAAWY,OAAO,iBAEpCN,sBAAsBO,GAClB,IAAKA,GAAQA,EAAKC,QAAQ,KAAO,EAC7B,OAAO,KACX,MAAMC,EAAIF,EAAKG,MAAM,KACrB,OAAiB,IAAbD,EAAEE,OACK,MACXF,EAAEG,MACoC,MAAlCH,EAAEA,EAAEE,OAAS,GAAGE,cACT,KACJX,KAAKY,mBAAmBL,EAAEM,KAAK,OAE1Cf,wBAAwBO,GACpB,IAAKA,GAAQA,EAAKC,QAAQ,KAAO,EAC7B,OAAOD,EACX,MAAME,EAAIF,EAAKG,MAAM,KACrB,OAAOR,KAAKY,mBAAmBL,EAAE,IAErCT,mBAAmBO,GACf,GAAoB,iBAATA,GAAqBA,EAAKC,QAAQ,MAAQ,EAAG,CACpD,MAAMQ,GACF,OACA,OACA,OACA,OACA,OACA,OACA,QAEJ,IAAIP,EAAIF,EAAKG,MAAM,KAmBnB,OAlBIR,KAAKD,QAAQgB,aACbR,EAAIA,EAAES,IAAIC,GAAQA,EAAKN,eACH,IAAbJ,EAAEE,QACTF,EAAE,GAAKA,EAAE,GAAGI,cACZJ,EAAE,GAAKA,EAAE,GAAGX,cACRkB,EAAaR,QAAQC,EAAE,GAAGI,gBAAkB,IAC5CJ,EAAE,GAAKd,EAAWc,EAAE,GAAGI,iBACP,IAAbJ,EAAEE,SACTF,EAAE,GAAKA,EAAE,GAAGI,cACQ,IAAhBJ,EAAE,GAAGE,SACLF,EAAE,GAAKA,EAAE,GAAGX,eACH,QAATW,EAAE,IAAgC,IAAhBA,EAAE,GAAGE,SACvBF,EAAE,GAAKA,EAAE,GAAGX,eACZkB,EAAaR,QAAQC,EAAE,GAAGI,gBAAkB,IAC5CJ,EAAE,GAAKd,EAAWc,EAAE,GAAGI,gBACvBG,EAAaR,QAAQC,EAAE,GAAGI,gBAAkB,IAC5CJ,EAAE,GAAKd,EAAWc,EAAE,GAAGI,iBAExBJ,EAAEM,KAAK,KAElB,OAAOb,KAAKD,QAAQmB,WAAalB,KAAKD,QAAQgB,aAAeV,EAAKM,cAAgBN,EAEtFP,cAAcO,GAEV,OADAL,KAAKG,OAAOgB,UAAU,8BAA+B,kIAC9CnB,KAAKoB,gBAAgBf,GAEhCP,gBAAgBO,GAIZ,OAH0B,iBAAtBL,KAAKD,QAAQsB,MAA2BrB,KAAKD,QAAQuB,4BACrDjB,EAAOL,KAAKuB,wBAAwBlB,KAEhCL,KAAKE,gBAAkBF,KAAKE,cAAcO,QAAUT,KAAKE,cAAcI,QAAQD,IAAS,EAEpGP,sBAAsB0B,GAClB,IAAKA,EACD,OAAO,KACX,IAAIC,EAuBJ,OAtBAD,EAAME,QAAQrB,IACV,GAAIoB,EACA,OACJ,IAAIE,EAAa3B,KAAKY,mBAAmBP,GACpCL,KAAKD,QAAQG,gBAAiBF,KAAKoB,gBAAgBO,KACpDF,EAAQE,MAEXF,GAASzB,KAAKD,QAAQG,eACvBsB,EAAME,QAAQrB,IACV,GAAIoB,EACA,OACJ,IAAIG,EAAU5B,KAAKuB,wBAAwBlB,GAC3C,GAAIL,KAAKoB,gBAAgBQ,GACrB,OAAOH,EAAQG,EACnBH,EAAQzB,KAAKD,QAAQG,cAAc2B,KAAKC,IACpC,GAAsC,IAAlCA,EAAaxB,QAAQsB,GACrB,OAAOE,MAIlBL,IACDA,EAAQzB,KAAK+B,iBAAiB/B,KAAKD,QAAQiC,aAAa,IACrDP,EAEX3B,iBAAiBmC,EAAW5B,GACxB,IAAK4B,EACD,SAGJ,GAFyB,iBAAdA,IACPA,GAAaA,IACkC,mBAA/CC,OAAOC,UAAUC,SAASC,MAAMJ,GAChC,OAAOA,EACX,IAAK5B,EACD,OAAO4B,EAAUK,YACrB,IAAIb,EAAQQ,EAAU5B,GAStB,OARKoB,IACDA,EAAQQ,EAAUjC,KAAKuC,sBAAsBlC,KAC5CoB,IACDA,EAAQQ,EAAUjC,KAAKY,mBAAmBP,KACzCoB,IACDA,EAAQQ,EAAUjC,KAAKuB,wBAAwBlB,KAC9CoB,IACDA,EAAQQ,EAAUK,SACfb,MAEX3B,mBAAmBO,EAAMmC,GACrB,MAAMC,EAAgBzC,KAAK+B,iBAAiBS,GAAgBxC,KAAKD,QAAQiC,gBAAmB3B,GACtFmB,KACAkB,EAAUC,IACPA,IAED3C,KAAKoB,gBAAgBuB,GACrBnB,EAAMoB,KAAKD,GAEX3C,KAAKG,OAAO0C,4DAA6DF,OAiBjF,MAdoB,iBAATtC,GAAqBA,EAAKC,QAAQ,MAAQ,GACvB,iBAAtBN,KAAKD,QAAQsB,MACbqB,EAAQ1C,KAAKY,mBAAmBP,IACV,iBAAtBL,KAAKD,QAAQsB,MAAiD,gBAAtBrB,KAAKD,QAAQsB,MACrDqB,EAAQ1C,KAAKuC,sBAAsBlC,IACb,gBAAtBL,KAAKD,QAAQsB,MACbqB,EAAQ1C,KAAKuB,wBAAwBlB,KAClB,iBAATA,GACdqC,EAAQ1C,KAAKY,mBAAmBP,IAEpCoC,EAAcf,QAAQoB,IACdtB,EAAMlB,QAAQwC,GAAM,GACpBJ,EAAQ1C,KAAKY,mBAAmBkC,MAEjCtB","file":"../LanguageUtils.js","sourcesContent":["define(['./logger'], function (baseLogger) {\n    'use strict';\n    function capitalize(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    class LanguageUtil {\n        constructor(options) {\n            this.options = options;\n            this.whitelist = this.options.supportedLngs || false;\n            this.supportedLngs = this.options.supportedLngs || false;\n            this.logger = baseLogger.create('languageUtils');\n        }\n        getScriptPartFromCode(code) {\n            if (!code || code.indexOf('-') < 0)\n                return null;\n            const p = code.split('-');\n            if (p.length === 2)\n                return null;\n            p.pop();\n            if (p[p.length - 1].toLowerCase() === 'x')\n                return null;\n            return this.formatLanguageCode(p.join('-'));\n        }\n        getLanguagePartFromCode(code) {\n            if (!code || code.indexOf('-') < 0)\n                return code;\n            const p = code.split('-');\n            return this.formatLanguageCode(p[0]);\n        }\n        formatLanguageCode(code) {\n            if (typeof code === 'string' && code.indexOf('-') > -1) {\n                const specialCases = [\n                    'hans',\n                    'hant',\n                    'latn',\n                    'cyrl',\n                    'cans',\n                    'mong',\n                    'arab'\n                ];\n                let p = code.split('-');\n                if (this.options.lowerCaseLng) {\n                    p = p.map(part => part.toLowerCase());\n                } else if (p.length === 2) {\n                    p[0] = p[0].toLowerCase();\n                    p[1] = p[1].toUpperCase();\n                    if (specialCases.indexOf(p[1].toLowerCase()) > -1)\n                        p[1] = capitalize(p[1].toLowerCase());\n                } else if (p.length === 3) {\n                    p[0] = p[0].toLowerCase();\n                    if (p[1].length === 2)\n                        p[1] = p[1].toUpperCase();\n                    if (p[0] !== 'sgn' && p[2].length === 2)\n                        p[2] = p[2].toUpperCase();\n                    if (specialCases.indexOf(p[1].toLowerCase()) > -1)\n                        p[1] = capitalize(p[1].toLowerCase());\n                    if (specialCases.indexOf(p[2].toLowerCase()) > -1)\n                        p[2] = capitalize(p[2].toLowerCase());\n                }\n                return p.join('-');\n            }\n            return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;\n        }\n        isWhitelisted(code) {\n            this.logger.deprecate('languageUtils.isWhitelisted', 'function \"isWhitelisted\" will be renamed to \"isSupportedCode\" in the next major - please make sure to rename it\\'s usage asap.');\n            return this.isSupportedCode(code);\n        }\n        isSupportedCode(code) {\n            if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {\n                code = this.getLanguagePartFromCode(code);\n            }\n            return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;\n        }\n        getBestMatchFromCodes(codes) {\n            if (!codes)\n                return null;\n            let found;\n            codes.forEach(code => {\n                if (found)\n                    return;\n                let cleanedLng = this.formatLanguageCode(code);\n                if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng))\n                    found = cleanedLng;\n            });\n            if (!found && this.options.supportedLngs) {\n                codes.forEach(code => {\n                    if (found)\n                        return;\n                    let lngOnly = this.getLanguagePartFromCode(code);\n                    if (this.isSupportedCode(lngOnly))\n                        return found = lngOnly;\n                    found = this.options.supportedLngs.find(supportedLng => {\n                        if (supportedLng.indexOf(lngOnly) === 0)\n                            return supportedLng;\n                    });\n                });\n            }\n            if (!found)\n                found = this.getFallbackCodes(this.options.fallbackLng)[0];\n            return found;\n        }\n        getFallbackCodes(fallbacks, code) {\n            if (!fallbacks)\n                return [];\n            if (typeof fallbacks === 'string')\n                fallbacks = [fallbacks];\n            if (Object.prototype.toString.apply(fallbacks) === '[object Array]')\n                return fallbacks;\n            if (!code)\n                return fallbacks.default || [];\n            let found = fallbacks[code];\n            if (!found)\n                found = fallbacks[this.getScriptPartFromCode(code)];\n            if (!found)\n                found = fallbacks[this.formatLanguageCode(code)];\n            if (!found)\n                found = fallbacks[this.getLanguagePartFromCode(code)];\n            if (!found)\n                found = fallbacks.default;\n            return found || [];\n        }\n        toResolveHierarchy(code, fallbackCode) {\n            const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);\n            const codes = [];\n            const addCode = c => {\n                if (!c)\n                    return;\n                if (this.isSupportedCode(c)) {\n                    codes.push(c);\n                } else {\n                    this.logger.warn(`rejecting language code not found in supportedLngs: ${ c }`);\n                }\n            };\n            if (typeof code === 'string' && code.indexOf('-') > -1) {\n                if (this.options.load !== 'languageOnly')\n                    addCode(this.formatLanguageCode(code));\n                if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly')\n                    addCode(this.getScriptPartFromCode(code));\n                if (this.options.load !== 'currentOnly')\n                    addCode(this.getLanguagePartFromCode(code));\n            } else if (typeof code === 'string') {\n                addCode(this.formatLanguageCode(code));\n            }\n            fallbackCodes.forEach(fc => {\n                if (codes.indexOf(fc) < 0)\n                    addCode(this.formatLanguageCode(fc));\n            });\n            return codes;\n        }\n    }\n    return LanguageUtil;\n});"]}