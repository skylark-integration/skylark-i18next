{"version":3,"sources":["skylark-i18next.js"],"names":["define","consoleLogger","type","[object Object]","args","this","output","console","apply","Logger","concreteLogger","options","init","prefix","logger","debug","bool","forward","lvl","debugOnly","moduleName","observers","events","listener","split","forEach","event","push","filter","l","cloned","concat","observer","getLastOfPath","object","path","Empty","cleanKey","key","indexOf","replace","canNotTraverseDeeper","stack","length","shift","obj","k","getPath","_entityMap","&","<",">","\"","'","/","isIE10","window","navigator","userAgent","defer","res","rej","promise","Promise","resolve","reject","makeString","copy","a","s","t","m","setPath","newValue","Object","pushPath","getPathWithDefaults","data","defaultData","value","undefined","deepExtend","target","source","overwrite","prop","String","regexEscape","str","escape","EventEmitter","utils","ns","defaultNS","super","call","keySeparator","index","splice","lng","silent","addNamespaces","emit","resources","prototype","toString","addResource","deep","pack","hasResourceBundle","removeNamespaces","getResource","compatibilityAPI","processors","module","name","translator","processor","process","baseLogger","postProcessor","checkedLoadedFor","services","create","language","interpolation","resolved","nsSeparator","namespaces","match","interpolator","nestingRegexp","parts","join","keys","lastKey","overloadTranslationOptionHandler","arguments","Array","isArray","extractFromKey","namespace","appendNamespaceToCIMode","toLowerCase","resUsedKey","usedKey","resExactUsedKey","exactUsedKey","resType","joinArrays","handleAsObjectInI18nFormat","i18nFormat","handleAsObject","returnObjects","warn","returnedObjectHandler","resTypeIsArray","newKeyToUse","hasOwnProperty","deepKey","translate","extendTranslation","usedDefault","isValidLookup","defaultValue","count","suffix","pluralResolver","getSuffix","updateMissing","log","fk","lngs","fallbackLngs","languageUtils","getFallbackCodes","fallbackLng","saveMissingTo","i","toResolveHierarchy","send","missingKeyHandler","backendConnector","saveMissing","needsPluralHandling","saveMissingPlurals","plurals","getPluralFormsOfKey","p","appendNamespaceToMissingKey","parseMissingKeyHandler","parse","usedLng","usedNS","skipInterpolation","skipOnVariables","nestBef","nb","defaultVariables","interpolate","na","nestAft","nest","reset","postProcess","postProcessorNames","applyPostProcessor","handle","postProcessPassResolved","i18nResolved","found","extracted","fallbackNS","needsContextHandling","context","codes","hasLoadedNamespace","code","finalKey","finalKeys","addLookupKeys","pluralSuffix","contextSeparator","possibleKey","pop","returnNull","returnEmptyString","resourceStore","capitalize","string","charAt","toUpperCase","slice","whitelist","supportedLngs","formatLanguageCode","specialCases","lowerCaseLng","map","part","cleanCode","deprecate","isSupportedCode","load","nonExplicitSupportedLngs","getLanguagePartFromCode","cleanedLng","lngOnly","find","supportedLng","fallbacks","default","getScriptPartFromCode","fallbackCode","fallbackCodes","addCode","c","fc","sets","nr","_rulesPluralsTypes","1","n","Number","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","rules","set","numbers","createRules","rule","getRule","ret","idx","noAbs","Math","abs","simplifyPluralSuffix","returnSuffix","prepend","compatibilityJSON","format","escapeValue","iOpts","useRawValueToEscape","prefixEscaped","suffixEscaped","formatSeparator","unescapePrefix","unescapeSuffix","nestingPrefix","nestingPrefixEscaped","nestingSuffix","nestingSuffixEscaped","nestingOptionsSeparator","maxReplaces","alwaysFormat","resetRegExp","regexpStr","regexp","RegExp","regexpUnescapeStr","regexpUnescape","nestingRegexpStr","replaces","regexSafe","val","handleFormat","trim","f","missingInterpolationHandler","todos","regex","safeValue","todo","exec","temp","lastIndex","clonedOptions","handleHasOptions","inheritedOptions","sep","optionsString","JSON","e","formatters","doReduce","includes","test","r","elem","reduce","v","backend","store","state","queue","languages","callback","toLoad","pending","toLoadLanguages","toLoadNamespaces","hasAllNamespaces","reload","loaded","errors","err","addResourceBundle","q","arr","what","remove","done","fcName","tried","wait","setTimeout","read","queueLoad","loadOne","prepareLoading","fallbackValue","isUpdate","get","initImmediate","nonExplicitWhitelist","preload","pluralSeparator","partialBundledLanguages","tDescription","transformOptions","ResourceStore","Translator","LanguageUtils","PluralResolver","Interpolator","BackendConnector","defaults","noop","I18n","modules","external","isInitialized","isClone","createClassOnDemand","ClassOrObject","lu","bind","on","languageDetector","detection","deferred","changeLanguage","usedCallback","append","Error","error","addPostProcessor","isLanguageChangingTo","setLng","getBestMatchFromCodes","cacheUserLanguage","loadResources","async","detect","fixedT","opts","rest","exists","lastLng","loadNotPending","loadState","precheck","preResult","preloaded","newLngs","mergedOptions","clone","i18next","main"],"mappings":"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GAAA,GACAF,EAAA1P,KAAAsO,mBAAAsB,MAEA1C,MAKAvN,EAAA,kCAAA,YAAA,SAAAuH,GACA,aACA,IAAA2I,IAEAtF,MACA,MACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,MACA,KACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,MAEAuF,IACA,EACA,GAEAF,GAAA,IAGArF,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,QACA,KACA,MACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEAuF,IACA,EACA,GAEAF,GAAA,IAGArF,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEAuF,IAAA,GACAF,GAAA,IAGArF,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MAEAuF,IACA,EACA,EACA,GAEAF,GAAA,IAGArF,MAAA,MACAuF,IACA,EACA,EACA,EACA,EACA,GACA,KAEAF,GAAA,IAGArF,MACA,KACA,MAEAuF,IACA,EACA,EACA,GAEAF,GAAA,IAGArF,MACA,MACA,MAEAuF,IACA,EACA,EACA,GAEAF,GAAA,IAGArF,MAAA,MACAuF,IACA,EACA,EACA,EACA,GAEAF,GAAA,IAGArF,MAAA,MACAuF,IACA,EACA,GAEAF,GAAA,IAGArF,MAAA,MACAuF,IACA,EACA,EACA,EACA,EACA,IAEAF,GAAA,KAGArF,MAAA,MACAuF,IACA,EACA,EACA,EACA,IAEAF,GAAA,KAGArF,MAAA,MACAuF,IACA,EACA,GAEAF,GAAA,KAGArF,MAAA,MACAuF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","file":"../skylark-i18next.js","sourcesContent":["define('skylark-i18next/logger',[],function () {\n    'use strict';\n    const consoleLogger = {\n        type: 'logger',\n        log(args) {\n            this.output('log', args);\n        },\n        warn(args) {\n            this.output('warn', args);\n        },\n        error(args) {\n            this.output('error', args);\n        },\n        output(type, args) {\n            if (console && console[type])\n                console[type].apply(console, args);\n        }\n    };\n    class Logger {\n        constructor(concreteLogger, options = {}) {\n            this.init(concreteLogger, options);\n        }\n        init(concreteLogger, options = {}) {\n            this.prefix = options.prefix || 'i18next:';\n            this.logger = concreteLogger || consoleLogger;\n            this.options = options;\n            this.debug = options.debug;\n        }\n        setDebug(bool) {\n            this.debug = bool;\n        }\n        log(...args) {\n            return this.forward(args, 'log', '', true);\n        }\n        warn(...args) {\n            return this.forward(args, 'warn', '', true);\n        }\n        error(...args) {\n            return this.forward(args, 'error', '');\n        }\n        deprecate(...args) {\n            return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);\n        }\n        forward(args, lvl, prefix, debugOnly) {\n            if (debugOnly && !this.debug)\n                return null;\n            if (typeof args[0] === 'string')\n                args[0] = `${ prefix }${ this.prefix } ${ args[0] }`;\n            return this.logger[lvl](args);\n        }\n        create(moduleName) {\n            return new Logger(this.logger, {\n                ...{ prefix: `${ this.prefix }:${ moduleName }:` },\n                ...this.options\n            });\n        }\n    }\n    return new Logger();\n});\ndefine('skylark-i18next/EventEmitter',[],function () {\n    'use strict';\n    class EventEmitter {\n        constructor() {\n            this.observers = {};\n        }\n        on(events, listener) {\n            events.split(' ').forEach(event => {\n                this.observers[event] = this.observers[event] || [];\n                this.observers[event].push(listener);\n            });\n            return this;\n        }\n        off(event, listener) {\n            if (!this.observers[event])\n                return;\n            if (!listener) {\n                delete this.observers[event];\n                return;\n            }\n            this.observers[event] = this.observers[event].filter(l => l !== listener);\n        }\n        emit(event, ...args) {\n            if (this.observers[event]) {\n                const cloned = [].concat(this.observers[event]);\n                cloned.forEach(observer => {\n                    observer(...args);\n                });\n            }\n            if (this.observers['*']) {\n                const cloned = [].concat(this.observers['*']);\n                cloned.forEach(observer => {\n                    observer.apply(observer, [\n                        event,\n                        ...args\n                    ]);\n                });\n            }\n        }\n    }\n    return EventEmitter;\n});\ndefine('skylark-i18next/utils',[],function () {\n    'use strict';\n    function defer() {\n        let res;\n        let rej;\n        const promise = new Promise((resolve, reject) => {\n            res = resolve;\n            rej = reject;\n        });\n        promise.resolve = res;\n        promise.reject = rej;\n        return promise;\n    }\n    function makeString(object) {\n        if (object == null)\n            return '';\n        return '' + object;\n    }\n    function copy(a, s, t) {\n        a.forEach(m => {\n            if (s[m])\n                t[m] = s[m];\n        });\n    }\n    function getLastOfPath(object, path, Empty) {\n        function cleanKey(key) {\n            return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;\n        }\n        function canNotTraverseDeeper() {\n            return !object || typeof object === 'string';\n        }\n        const stack = typeof path !== 'string' ? [].concat(path) : path.split('.');\n        while (stack.length > 1) {\n            if (canNotTraverseDeeper())\n                return {};\n            const key = cleanKey(stack.shift());\n            if (!object[key] && Empty)\n                object[key] = new Empty();\n            object = object[key];\n        }\n        if (canNotTraverseDeeper())\n            return {};\n        return {\n            obj: object,\n            k: cleanKey(stack.shift())\n        };\n    }\n    function setPath(object, path, newValue) {\n        const {obj, k} = getLastOfPath(object, path, Object);\n        obj[k] = newValue;\n    }\n    function pushPath(object, path, newValue, concat) {\n        const {obj, k} = getLastOfPath(object, path, Object);\n        obj[k] = obj[k] || [];\n        if (concat)\n            obj[k] = obj[k].concat(newValue);\n        if (!concat)\n            obj[k].push(newValue);\n    }\n    function getPath(object, path) {\n        const {obj, k} = getLastOfPath(object, path);\n        if (!obj)\n            return undefined;\n        return obj[k];\n    }\n    function getPathWithDefaults(data, defaultData, key) {\n        const value = getPath(data, key);\n        if (value !== undefined) {\n            return value;\n        }\n        return getPath(defaultData, key);\n    }\n    function deepExtend(target, source, overwrite) {\n        for (const prop in source) {\n            if (prop !== '__proto__') {\n                if (prop in target) {\n                    if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {\n                        if (overwrite)\n                            target[prop] = source[prop];\n                    } else {\n                        deepExtend(target[prop], source[prop], overwrite);\n                    }\n                } else {\n                    target[prop] = source[prop];\n                }\n            }\n        }\n        return target;\n    }\n    function regexEscape(str) {\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n    }\n    var _entityMap = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;',\n        '/': '&#x2F;'\n    };\n    function escape(data) {\n        if (typeof data === 'string') {\n            return data.replace(/[&<>\"'\\/]/g, s => _entityMap[s]);\n        }\n        return data;\n    }\n    const isIE10 = typeof window !== 'undefined' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;\n    return {\n        defer: defer,\n        makeString: makeString,\n        copy: copy,\n        setPath: setPath,\n        pushPath: pushPath,\n        getPath: getPath,\n        getPathWithDefaults: getPathWithDefaults,\n        deepExtend: deepExtend,\n        regexEscape: regexEscape,\n        escape: escape,\n        isIE10: isIE10\n    };\n});\ndefine('skylark-i18next/ResourceStore',[\n    './EventEmitter',\n    './utils'\n], function (EventEmitter, utils) {\n    'use strict';\n    class ResourceStore extends EventEmitter {\n        constructor(data, options = {\n            ns: ['translation'],\n            defaultNS: 'translation'\n        }) {\n            super();\n            if (utils.isIE10) {\n                EventEmitter.call(this);\n            }\n            this.data = data || {};\n            this.options = options;\n            if (this.options.keySeparator === undefined) {\n                this.options.keySeparator = '.';\n            }\n        }\n        addNamespaces(ns) {\n            if (this.options.ns.indexOf(ns) < 0) {\n                this.options.ns.push(ns);\n            }\n        }\n        removeNamespaces(ns) {\n            const index = this.options.ns.indexOf(ns);\n            if (index > -1) {\n                this.options.ns.splice(index, 1);\n            }\n        }\n        getResource(lng, ns, key, options = {}) {\n            const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n            let path = [\n                lng,\n                ns\n            ];\n            if (key && typeof key !== 'string')\n                path = path.concat(key);\n            if (key && typeof key === 'string')\n                path = path.concat(keySeparator ? key.split(keySeparator) : key);\n            if (lng.indexOf('.') > -1) {\n                path = lng.split('.');\n            }\n            return utils.getPath(this.data, path);\n        }\n        addResource(lng, ns, key, value, options = { silent: false }) {\n            let keySeparator = this.options.keySeparator;\n            if (keySeparator === undefined)\n                keySeparator = '.';\n            let path = [\n                lng,\n                ns\n            ];\n            if (key)\n                path = path.concat(keySeparator ? key.split(keySeparator) : key);\n            if (lng.indexOf('.') > -1) {\n                path = lng.split('.');\n                value = ns;\n                ns = path[1];\n            }\n            this.addNamespaces(ns);\n            utils.setPath(this.data, path, value);\n            if (!options.silent)\n                this.emit('added', lng, ns, key, value);\n        }\n        addResources(lng, ns, resources, options = { silent: false }) {\n            for (const m in resources) {\n                if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]')\n                    this.addResource(lng, ns, m, resources[m], { silent: true });\n            }\n            if (!options.silent)\n                this.emit('added', lng, ns, resources);\n        }\n        addResourceBundle(lng, ns, resources, deep, overwrite, options = { silent: false }) {\n            let path = [\n                lng,\n                ns\n            ];\n            if (lng.indexOf('.') > -1) {\n                path = lng.split('.');\n                deep = resources;\n                resources = ns;\n                ns = path[1];\n            }\n            this.addNamespaces(ns);\n            let pack = utils.getPath(this.data, path) || {};\n            if (deep) {\n                utils.deepExtend(pack, resources, overwrite);\n            } else {\n                pack = {\n                    ...pack,\n                    ...resources\n                };\n            }\n            utils.setPath(this.data, path, pack);\n            if (!options.silent)\n                this.emit('added', lng, ns, resources);\n        }\n        removeResourceBundle(lng, ns) {\n            if (this.hasResourceBundle(lng, ns)) {\n                delete this.data[lng][ns];\n            }\n            this.removeNamespaces(ns);\n            this.emit('removed', lng, ns);\n        }\n        hasResourceBundle(lng, ns) {\n            return this.getResource(lng, ns) !== undefined;\n        }\n        getResourceBundle(lng, ns) {\n            if (!ns)\n                ns = this.options.defaultNS;\n            if (this.options.compatibilityAPI === 'v1')\n                return {\n                    ...{},\n                    ...this.getResource(lng, ns)\n                };\n            return this.getResource(lng, ns);\n        }\n        getDataByLanguage(lng) {\n            return this.data[lng];\n        }\n        toJSON() {\n            return this.data;\n        }\n    }\n    return ResourceStore;\n});\ndefine('skylark-i18next/postProcessor',[],function () {\n    'use strict';\n    return {\n        processors: {},\n        addPostProcessor(module) {\n            this.processors[module.name] = module;\n        },\n        handle(processors, value, key, options, translator) {\n            processors.forEach(processor => {\n                if (this.processors[processor])\n                    value = this.processors[processor].process(value, key, options, translator);\n            });\n            return value;\n        }\n    };\n});\ndefine('skylark-i18next/Translator',[\n    './logger',\n    './EventEmitter',\n    './postProcessor',\n    './utils'\n], function (baseLogger, EventEmitter, postProcessor, utils) {\n    'use strict';\n    const checkedLoadedFor = {};\n    class Translator extends EventEmitter {\n        constructor(services, options = {}) {\n            super();\n            if (utils.isIE10) {\n                EventEmitter.call(this);\n            }\n            utils.copy([\n                'resourceStore',\n                'languageUtils',\n                'pluralResolver',\n                'interpolator',\n                'backendConnector',\n                'i18nFormat',\n                'utils'\n            ], services, this);\n            this.options = options;\n            if (this.options.keySeparator === undefined) {\n                this.options.keySeparator = '.';\n            }\n            this.logger = baseLogger.create('translator');\n        }\n        changeLanguage(lng) {\n            if (lng)\n                this.language = lng;\n        }\n        exists(key, options = { interpolation: {} }) {\n            const resolved = this.resolve(key, options);\n            return resolved && resolved.res !== undefined;\n        }\n        extractFromKey(key, options) {\n            let nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;\n            if (nsSeparator === undefined)\n                nsSeparator = ':';\n            const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n            let namespaces = options.ns || this.options.defaultNS;\n            if (nsSeparator && key.indexOf(nsSeparator) > -1) {\n                const m = key.match(this.interpolator.nestingRegexp);\n                if (m && m.length > 0) {\n                    return {\n                        key,\n                        namespaces\n                    };\n                }\n                const parts = key.split(nsSeparator);\n                if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)\n                    namespaces = parts.shift();\n                key = parts.join(keySeparator);\n            }\n            if (typeof namespaces === 'string')\n                namespaces = [namespaces];\n            return {\n                key,\n                namespaces\n            };\n        }\n        translate(keys, options, lastKey) {\n            if (typeof options !== 'object' && this.options.overloadTranslationOptionHandler) {\n                options = this.options.overloadTranslationOptionHandler(arguments);\n            }\n            if (!options)\n                options = {};\n            if (keys === undefined || keys === null)\n                return '';\n            if (!Array.isArray(keys))\n                keys = [String(keys)];\n            const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n            const {key, namespaces} = this.extractFromKey(keys[keys.length - 1], options);\n            const namespace = namespaces[namespaces.length - 1];\n            const lng = options.lng || this.language;\n            const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;\n            if (lng && lng.toLowerCase() === 'cimode') {\n                if (appendNamespaceToCIMode) {\n                    const nsSeparator = options.nsSeparator || this.options.nsSeparator;\n                    return namespace + nsSeparator + key;\n                }\n                return key;\n            }\n            const resolved = this.resolve(keys, options);\n            let res = resolved && resolved.res;\n            const resUsedKey = resolved && resolved.usedKey || key;\n            const resExactUsedKey = resolved && resolved.exactUsedKey || key;\n            const resType = Object.prototype.toString.apply(res);\n            const noObject = [\n                '[object Number]',\n                '[object Function]',\n                '[object RegExp]'\n            ];\n            const joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;\n            const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;\n            const handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';\n            if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {\n                if (!options.returnObjects && !this.options.returnObjects) {\n                    this.logger.warn('accessing an object - but returnObjects options is not enabled!');\n                    return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, options) : `key '${ key } (${ this.language })' returned an object instead of string.`;\n                }\n                if (keySeparator) {\n                    const resTypeIsArray = resType === '[object Array]';\n                    const copy = resTypeIsArray ? [] : {};\n                    let newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;\n                    for (const m in res) {\n                        if (Object.prototype.hasOwnProperty.call(res, m)) {\n                            const deepKey = `${ newKeyToUse }${ keySeparator }${ m }`;\n                            copy[m] = this.translate(deepKey, {\n                                ...options,\n                                ...{\n                                    joinArrays: false,\n                                    ns: namespaces\n                                }\n                            });\n                            if (copy[m] === deepKey)\n                                copy[m] = res[m];\n                        }\n                    }\n                    res = copy;\n                }\n            } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {\n                res = res.join(joinArrays);\n                if (res)\n                    res = this.extendTranslation(res, keys, options, lastKey);\n            } else {\n                let usedDefault = false;\n                let usedKey = false;\n                if (!this.isValidLookup(res) && options.defaultValue !== undefined) {\n                    usedDefault = true;\n                    if (options.count !== undefined) {\n                        const suffix = this.pluralResolver.getSuffix(lng, options.count);\n                        res = options[`defaultValue${ suffix }`];\n                    }\n                    if (!res)\n                        res = options.defaultValue;\n                }\n                if (!this.isValidLookup(res)) {\n                    usedKey = true;\n                    res = key;\n                }\n                const updateMissing = options.defaultValue && options.defaultValue !== res && this.options.updateMissing;\n                if (usedKey || usedDefault || updateMissing) {\n                    this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? options.defaultValue : res);\n                    if (keySeparator) {\n                        const fk = this.resolve(key, {\n                            ...options,\n                            keySeparator: false\n                        });\n                        if (fk && fk.res)\n                            this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');\n                    }\n                    let lngs = [];\n                    const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);\n                    if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {\n                        for (let i = 0; i < fallbackLngs.length; i++) {\n                            lngs.push(fallbackLngs[i]);\n                        }\n                    } else if (this.options.saveMissingTo === 'all') {\n                        lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);\n                    } else {\n                        lngs.push(options.lng || this.language);\n                    }\n                    const send = (l, k) => {\n                        if (this.options.missingKeyHandler) {\n                            this.options.missingKeyHandler(l, namespace, k, updateMissing ? options.defaultValue : res, updateMissing, options);\n                        } else if (this.backendConnector && this.backendConnector.saveMissing) {\n                            this.backendConnector.saveMissing(l, namespace, k, updateMissing ? options.defaultValue : res, updateMissing, options);\n                        }\n                        this.emit('missingKey', l, namespace, k, res);\n                    };\n                    if (this.options.saveMissing) {\n                        const needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';\n                        if (this.options.saveMissingPlurals && needsPluralHandling) {\n                            lngs.forEach(l => {\n                                const plurals = this.pluralResolver.getPluralFormsOfKey(l, key);\n                                plurals.forEach(p => send([l], p));\n                            });\n                        } else {\n                            send(lngs, key);\n                        }\n                    }\n                }\n                res = this.extendTranslation(res, keys, options, resolved, lastKey);\n                if (usedKey && res === key && this.options.appendNamespaceToMissingKey)\n                    res = `${ namespace }:${ key }`;\n                if (usedKey && this.options.parseMissingKeyHandler)\n                    res = this.options.parseMissingKeyHandler(res);\n            }\n            return res;\n        }\n        extendTranslation(res, key, options, resolved, lastKey) {\n            if (this.i18nFormat && this.i18nFormat.parse) {\n                res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, { resolved });\n            } else if (!options.skipInterpolation) {\n                if (options.interpolation)\n                    this.interpolator.init({\n                        ...options,\n                        ...{\n                            interpolation: {\n                                ...this.options.interpolation,\n                                ...options.interpolation\n                            }\n                        }\n                    });\n                const skipOnVariables = options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;\n                let nestBef;\n                if (skipOnVariables) {\n                    const nb = res.match(this.interpolator.nestingRegexp);\n                    nestBef = nb && nb.length;\n                }\n                let data = options.replace && typeof options.replace !== 'string' ? options.replace : options;\n                if (this.options.interpolation.defaultVariables)\n                    data = {\n                        ...this.options.interpolation.defaultVariables,\n                        ...data\n                    };\n                res = this.interpolator.interpolate(res, data, options.lng || this.language, options);\n                if (skipOnVariables) {\n                    const na = res.match(this.interpolator.nestingRegexp);\n                    const nestAft = na && na.length;\n                    if (nestBef < nestAft)\n                        options.nest = false;\n                }\n                if (options.nest !== false)\n                    res = this.interpolator.nest(res, (...args) => {\n                        if (lastKey && lastKey[0] === args[0]) {\n                            this.logger.warn(`It seems you are nesting recursively key: ${ args[0] } in key: ${ key[0] }`);\n                            return null;\n                        }\n                        return this.translate(...args, key);\n                    }, options);\n                if (options.interpolation)\n                    this.interpolator.reset();\n            }\n            const postProcess = options.postProcess || this.options.postProcess;\n            const postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;\n            if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {\n                res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {\n                    i18nResolved: resolved,\n                    ...options\n                } : options, this);\n            }\n            return res;\n        }\n        resolve(keys, options = {}) {\n            let found;\n            let usedKey;\n            let exactUsedKey;\n            let usedLng;\n            let usedNS;\n            if (typeof keys === 'string')\n                keys = [keys];\n            keys.forEach(k => {\n                if (this.isValidLookup(found))\n                    return;\n                const extracted = this.extractFromKey(k, options);\n                const key = extracted.key;\n                usedKey = key;\n                let namespaces = extracted.namespaces;\n                if (this.options.fallbackNS)\n                    namespaces = namespaces.concat(this.options.fallbackNS);\n                const needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';\n                const needsContextHandling = options.context !== undefined && typeof options.context === 'string' && options.context !== '';\n                const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);\n                namespaces.forEach(ns => {\n                    if (this.isValidLookup(found))\n                        return;\n                    usedNS = ns;\n                    if (!checkedLoadedFor[`${ codes[0] }-${ ns }`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {\n                        checkedLoadedFor[`${ codes[0] }-${ ns }`] = true;\n                        this.logger.warn(`key \"${ usedKey }\" for languages \"${ codes.join(', ') }\" won't get resolved as namespace \"${ usedNS }\" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');\n                    }\n                    codes.forEach(code => {\n                        if (this.isValidLookup(found))\n                            return;\n                        usedLng = code;\n                        let finalKey = key;\n                        const finalKeys = [finalKey];\n                        if (this.i18nFormat && this.i18nFormat.addLookupKeys) {\n                            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);\n                        } else {\n                            let pluralSuffix;\n                            if (needsPluralHandling)\n                                pluralSuffix = this.pluralResolver.getSuffix(code, options.count);\n                            if (needsPluralHandling && needsContextHandling)\n                                finalKeys.push(finalKey + pluralSuffix);\n                            if (needsContextHandling)\n                                finalKeys.push(finalKey += `${ this.options.contextSeparator }${ options.context }`);\n                            if (needsPluralHandling)\n                                finalKeys.push(finalKey += pluralSuffix);\n                        }\n                        let possibleKey;\n                        while (possibleKey = finalKeys.pop()) {\n                            if (!this.isValidLookup(found)) {\n                                exactUsedKey = possibleKey;\n                                found = this.getResource(code, ns, possibleKey, options);\n                            }\n                        }\n                    });\n                });\n            });\n            return {\n                res: found,\n                usedKey,\n                exactUsedKey,\n                usedLng,\n                usedNS\n            };\n        }\n        isValidLookup(res) {\n            return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');\n        }\n        getResource(code, ns, key, options = {}) {\n            if (this.i18nFormat && this.i18nFormat.getResource)\n                return this.i18nFormat.getResource(code, ns, key, options);\n            return this.resourceStore.getResource(code, ns, key, options);\n        }\n    }\n    return Translator;\n});\ndefine('skylark-i18next/LanguageUtils',['./logger'], function (baseLogger) {\n    'use strict';\n    function capitalize(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    class LanguageUtil {\n        constructor(options) {\n            this.options = options;\n            this.whitelist = this.options.supportedLngs || false;\n            this.supportedLngs = this.options.supportedLngs || false;\n            this.logger = baseLogger.create('languageUtils');\n        }\n        getScriptPartFromCode(code) {\n            if (!code || code.indexOf('-') < 0)\n                return null;\n            const p = code.split('-');\n            if (p.length === 2)\n                return null;\n            p.pop();\n            if (p[p.length - 1].toLowerCase() === 'x')\n                return null;\n            return this.formatLanguageCode(p.join('-'));\n        }\n        getLanguagePartFromCode(code) {\n            if (!code || code.indexOf('-') < 0)\n                return code;\n            const p = code.split('-');\n            return this.formatLanguageCode(p[0]);\n        }\n        formatLanguageCode(code) {\n            if (typeof code === 'string' && code.indexOf('-') > -1) {\n                const specialCases = [\n                    'hans',\n                    'hant',\n                    'latn',\n                    'cyrl',\n                    'cans',\n                    'mong',\n                    'arab'\n                ];\n                let p = code.split('-');\n                if (this.options.lowerCaseLng) {\n                    p = p.map(part => part.toLowerCase());\n                } else if (p.length === 2) {\n                    p[0] = p[0].toLowerCase();\n                    p[1] = p[1].toUpperCase();\n                    if (specialCases.indexOf(p[1].toLowerCase()) > -1)\n                        p[1] = capitalize(p[1].toLowerCase());\n                } else if (p.length === 3) {\n                    p[0] = p[0].toLowerCase();\n                    if (p[1].length === 2)\n                        p[1] = p[1].toUpperCase();\n                    if (p[0] !== 'sgn' && p[2].length === 2)\n                        p[2] = p[2].toUpperCase();\n                    if (specialCases.indexOf(p[1].toLowerCase()) > -1)\n                        p[1] = capitalize(p[1].toLowerCase());\n                    if (specialCases.indexOf(p[2].toLowerCase()) > -1)\n                        p[2] = capitalize(p[2].toLowerCase());\n                }\n                return p.join('-');\n            }\n            return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;\n        }\n        isWhitelisted(code) {\n            this.logger.deprecate('languageUtils.isWhitelisted', 'function \"isWhitelisted\" will be renamed to \"isSupportedCode\" in the next major - please make sure to rename it\\'s usage asap.');\n            return this.isSupportedCode(code);\n        }\n        isSupportedCode(code) {\n            if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {\n                code = this.getLanguagePartFromCode(code);\n            }\n            return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;\n        }\n        getBestMatchFromCodes(codes) {\n            if (!codes)\n                return null;\n            let found;\n            codes.forEach(code => {\n                if (found)\n                    return;\n                let cleanedLng = this.formatLanguageCode(code);\n                if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng))\n                    found = cleanedLng;\n            });\n            if (!found && this.options.supportedLngs) {\n                codes.forEach(code => {\n                    if (found)\n                        return;\n                    let lngOnly = this.getLanguagePartFromCode(code);\n                    if (this.isSupportedCode(lngOnly))\n                        return found = lngOnly;\n                    found = this.options.supportedLngs.find(supportedLng => {\n                        if (supportedLng.indexOf(lngOnly) === 0)\n                            return supportedLng;\n                    });\n                });\n            }\n            if (!found)\n                found = this.getFallbackCodes(this.options.fallbackLng)[0];\n            return found;\n        }\n        getFallbackCodes(fallbacks, code) {\n            if (!fallbacks)\n                return [];\n            if (typeof fallbacks === 'string')\n                fallbacks = [fallbacks];\n            if (Object.prototype.toString.apply(fallbacks) === '[object Array]')\n                return fallbacks;\n            if (!code)\n                return fallbacks.default || [];\n            let found = fallbacks[code];\n            if (!found)\n                found = fallbacks[this.getScriptPartFromCode(code)];\n            if (!found)\n                found = fallbacks[this.formatLanguageCode(code)];\n            if (!found)\n                found = fallbacks[this.getLanguagePartFromCode(code)];\n            if (!found)\n                found = fallbacks.default;\n            return found || [];\n        }\n        toResolveHierarchy(code, fallbackCode) {\n            const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);\n            const codes = [];\n            const addCode = c => {\n                if (!c)\n                    return;\n                if (this.isSupportedCode(c)) {\n                    codes.push(c);\n                } else {\n                    this.logger.warn(`rejecting language code not found in supportedLngs: ${ c }`);\n                }\n            };\n            if (typeof code === 'string' && code.indexOf('-') > -1) {\n                if (this.options.load !== 'languageOnly')\n                    addCode(this.formatLanguageCode(code));\n                if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly')\n                    addCode(this.getScriptPartFromCode(code));\n                if (this.options.load !== 'currentOnly')\n                    addCode(this.getLanguagePartFromCode(code));\n            } else if (typeof code === 'string') {\n                addCode(this.formatLanguageCode(code));\n            }\n            fallbackCodes.forEach(fc => {\n                if (codes.indexOf(fc) < 0)\n                    addCode(this.formatLanguageCode(fc));\n            });\n            return codes;\n        }\n    }\n    return LanguageUtil;\n});\ndefine('skylark-i18next/PluralResolver',['./logger'], function (baseLogger) {\n    'use strict';\n    let sets = [\n        {\n            lngs: [\n                'ach',\n                'ak',\n                'am',\n                'arn',\n                'br',\n                'fil',\n                'gun',\n                'ln',\n                'mfe',\n                'mg',\n                'mi',\n                'oc',\n                'pt',\n                'pt-BR',\n                'tg',\n                'ti',\n                'tr',\n                'uz',\n                'wa'\n            ],\n            nr: [\n                1,\n                2\n            ],\n            fc: 1\n        },\n        {\n            lngs: [\n                'af',\n                'an',\n                'ast',\n                'az',\n                'bg',\n                'bn',\n                'ca',\n                'da',\n                'de',\n                'dev',\n                'el',\n                'en',\n                'eo',\n                'es',\n                'et',\n                'eu',\n                'fi',\n                'fo',\n                'fur',\n                'fy',\n                'gl',\n                'gu',\n                'ha',\n                'hi',\n                'hu',\n                'hy',\n                'ia',\n                'it',\n                'kn',\n                'ku',\n                'lb',\n                'mai',\n                'ml',\n                'mn',\n                'mr',\n                'nah',\n                'nap',\n                'nb',\n                'ne',\n                'nl',\n                'nn',\n                'no',\n                'nso',\n                'pa',\n                'pap',\n                'pms',\n                'ps',\n                'pt-PT',\n                'rm',\n                'sco',\n                'se',\n                'si',\n                'so',\n                'son',\n                'sq',\n                'sv',\n                'sw',\n                'ta',\n                'te',\n                'tk',\n                'ur',\n                'yo'\n            ],\n            nr: [\n                1,\n                2\n            ],\n            fc: 2\n        },\n        {\n            lngs: [\n                'ay',\n                'bo',\n                'cgg',\n                'fa',\n                'ht',\n                'id',\n                'ja',\n                'jbo',\n                'ka',\n                'kk',\n                'km',\n                'ko',\n                'ky',\n                'lo',\n                'ms',\n                'sah',\n                'su',\n                'th',\n                'tt',\n                'ug',\n                'vi',\n                'wo',\n                'zh'\n            ],\n            nr: [1],\n            fc: 3\n        },\n        {\n            lngs: [\n                'be',\n                'bs',\n                'cnr',\n                'dz',\n                'hr',\n                'ru',\n                'sr',\n                'uk'\n            ],\n            nr: [\n                1,\n                2,\n                5\n            ],\n            fc: 4\n        },\n        {\n            lngs: ['ar'],\n            nr: [\n                0,\n                1,\n                2,\n                3,\n                11,\n                100\n            ],\n            fc: 5\n        },\n        {\n            lngs: [\n                'cs',\n                'sk'\n            ],\n            nr: [\n                1,\n                2,\n                5\n            ],\n            fc: 6\n        },\n        {\n            lngs: [\n                'csb',\n                'pl'\n            ],\n            nr: [\n                1,\n                2,\n                5\n            ],\n            fc: 7\n        },\n        {\n            lngs: ['cy'],\n            nr: [\n                1,\n                2,\n                3,\n                8\n            ],\n            fc: 8\n        },\n        {\n            lngs: ['fr'],\n            nr: [\n                1,\n                2\n            ],\n            fc: 9\n        },\n        {\n            lngs: ['ga'],\n            nr: [\n                1,\n                2,\n                3,\n                7,\n                11\n            ],\n            fc: 10\n        },\n        {\n            lngs: ['gd'],\n            nr: [\n                1,\n                2,\n                3,\n                20\n            ],\n            fc: 11\n        },\n        {\n            lngs: ['is'],\n            nr: [\n                1,\n                2\n            ],\n            fc: 12\n        },\n        {\n            lngs: ['jv'],\n            nr: [\n                0,\n                1\n            ],\n            fc: 13\n        },\n        {\n            lngs: ['kw'],\n            nr: [\n                1,\n                2,\n                3,\n                4\n            ],\n            fc: 14\n        },\n        {\n            lngs: ['lt'],\n            nr: [\n                1,\n                2,\n                10\n            ],\n            fc: 15\n        },\n        {\n            lngs: ['lv'],\n            nr: [\n                1,\n                2,\n                0\n            ],\n            fc: 16\n        },\n        {\n            lngs: ['mk'],\n            nr: [\n                1,\n                2\n            ],\n            fc: 17\n        },\n        {\n            lngs: ['mnk'],\n            nr: [\n                0,\n                1,\n                2\n            ],\n            fc: 18\n        },\n        {\n            lngs: ['mt'],\n            nr: [\n                1,\n                2,\n                11,\n                20\n            ],\n            fc: 19\n        },\n        {\n            lngs: ['or'],\n            nr: [\n                2,\n                1\n            ],\n            fc: 2\n        },\n        {\n            lngs: ['ro'],\n            nr: [\n                1,\n                2,\n                20\n            ],\n            fc: 20\n        },\n        {\n            lngs: ['sl'],\n            nr: [\n                5,\n                1,\n                2,\n                3\n            ],\n            fc: 21\n        },\n        {\n            lngs: [\n                'he',\n                'iw'\n            ],\n            nr: [\n                1,\n                2,\n                20,\n                21\n            ],\n            fc: 22\n        }\n    ];\n    let _rulesPluralsTypes = {\n        1: function (n) {\n            return Number(n > 1);\n        },\n        2: function (n) {\n            return Number(n != 1);\n        },\n        3: function (n) {\n            return 0;\n        },\n        4: function (n) {\n            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n        },\n        5: function (n) {\n            return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);\n        },\n        6: function (n) {\n            return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);\n        },\n        7: function (n) {\n            return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n        },\n        8: function (n) {\n            return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);\n        },\n        9: function (n) {\n            return Number(n >= 2);\n        },\n        10: function (n) {\n            return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);\n        },\n        11: function (n) {\n            return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);\n        },\n        12: function (n) {\n            return Number(n % 10 != 1 || n % 100 == 11);\n        },\n        13: function (n) {\n            return Number(n !== 0);\n        },\n        14: function (n) {\n            return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);\n        },\n        15: function (n) {\n            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n        },\n        16: function (n) {\n            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);\n        },\n        17: function (n) {\n            return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);\n        },\n        18: function (n) {\n            return Number(n == 0 ? 0 : n == 1 ? 1 : 2);\n        },\n        19: function (n) {\n            return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);\n        },\n        20: function (n) {\n            return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);\n        },\n        21: function (n) {\n            return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);\n        },\n        22: function (n) {\n            return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);\n        }\n    };\n    function createRules() {\n        const rules = {};\n        sets.forEach(set => {\n            set.lngs.forEach(l => {\n                rules[l] = {\n                    numbers: set.nr,\n                    plurals: _rulesPluralsTypes[set.fc]\n                };\n            });\n        });\n        return rules;\n    }\n    class PluralResolver {\n        constructor(languageUtils, options = {}) {\n            this.languageUtils = languageUtils;\n            this.options = options;\n            this.logger = baseLogger.create('pluralResolver');\n            this.rules = createRules();\n        }\n        addRule(lng, obj) {\n            this.rules[lng] = obj;\n        }\n        getRule(code) {\n            return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];\n        }\n        needsPlural(code) {\n            const rule = this.getRule(code);\n            return rule && rule.numbers.length > 1;\n        }\n        getPluralFormsOfKey(code, key) {\n            const ret = [];\n            const rule = this.getRule(code);\n            if (!rule)\n                return ret;\n            rule.numbers.forEach(n => {\n                const suffix = this.getSuffix(code, n);\n                ret.push(`${ key }${ suffix }`);\n            });\n            return ret;\n        }\n        getSuffix(code, count) {\n            const rule = this.getRule(code);\n            if (rule) {\n                const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));\n                let suffix = rule.numbers[idx];\n                if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n                    if (suffix === 2) {\n                        suffix = 'plural';\n                    } else if (suffix === 1) {\n                        suffix = '';\n                    }\n                }\n                const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();\n                if (this.options.compatibilityJSON === 'v1') {\n                    if (suffix === 1)\n                        return '';\n                    if (typeof suffix === 'number')\n                        return `_plural_${ suffix.toString() }`;\n                    return returnSuffix();\n                } else if (this.options.compatibilityJSON === 'v2') {\n                    return returnSuffix();\n                } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n                    return returnSuffix();\n                }\n                return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();\n            }\n            this.logger.warn(`no plural rule found for: ${ code }`);\n            return '';\n        }\n    }\n    return PluralResolver;\n});\ndefine('skylark-i18next/Interpolator',[\n    './utils',\n    './logger'\n], function (utils, baseLogger) {\n    'use strict';\n    class Interpolator {\n        constructor(options = {}) {\n            this.logger = baseLogger.create('interpolator');\n            this.options = options;\n            this.format = options.interpolation && options.interpolation.format || (value => value);\n            this.init(options);\n        }\n        init(options = {}) {\n            if (!options.interpolation)\n                options.interpolation = { escapeValue: true };\n            const iOpts = options.interpolation;\n            this.escape = iOpts.escape !== undefined ? iOpts.escape : utils.escape;\n            this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;\n            this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;\n            this.prefix = iOpts.prefix ? utils.regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';\n            this.suffix = iOpts.suffix ? utils.regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';\n            this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';\n            this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';\n            this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';\n            this.nestingPrefix = iOpts.nestingPrefix ? utils.regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || utils.regexEscape('$t(');\n            this.nestingSuffix = iOpts.nestingSuffix ? utils.regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || utils.regexEscape(')');\n            this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';\n            this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;\n            this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;\n            this.resetRegExp();\n        }\n        reset() {\n            if (this.options)\n                this.init(this.options);\n        }\n        resetRegExp() {\n            const regexpStr = `${ this.prefix }(.+?)${ this.suffix }`;\n            this.regexp = new RegExp(regexpStr, 'g');\n            const regexpUnescapeStr = `${ this.prefix }${ this.unescapePrefix }(.+?)${ this.unescapeSuffix }${ this.suffix }`;\n            this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');\n            const nestingRegexpStr = `${ this.nestingPrefix }(.+?)${ this.nestingSuffix }`;\n            this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');\n        }\n        interpolate(str, data, lng, options) {\n            let match;\n            let value;\n            let replaces;\n            const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};\n            function regexSafe(val) {\n                return val.replace(/\\$/g, '$$$$');\n            }\n            const handleFormat = key => {\n                if (key.indexOf(this.formatSeparator) < 0) {\n                    const path = utils.getPathWithDefaults(data, defaultData, key);\n                    return this.alwaysFormat ? this.format(path, undefined, lng) : path;\n                }\n                const p = key.split(this.formatSeparator);\n                const k = p.shift().trim();\n                const f = p.join(this.formatSeparator).trim();\n                return this.format(utils.getPathWithDefaults(data, defaultData, k), f, lng, options);\n            };\n            this.resetRegExp();\n            const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;\n            const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;\n            const todos = [\n                {\n                    regex: this.regexpUnescape,\n                    safeValue: val => regexSafe(val)\n                },\n                {\n                    regex: this.regexp,\n                    safeValue: val => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)\n                }\n            ];\n            todos.forEach(todo => {\n                replaces = 0;\n                while (match = todo.regex.exec(str)) {\n                    value = handleFormat(match[1].trim());\n                    if (value === undefined) {\n                        if (typeof missingInterpolationHandler === 'function') {\n                            const temp = missingInterpolationHandler(str, match, options);\n                            value = typeof temp === 'string' ? temp : '';\n                        } else if (skipOnVariables) {\n                            value = match[0];\n                            continue;\n                        } else {\n                            this.logger.warn(`missed to pass in variable ${ match[1] } for interpolating ${ str }`);\n                            value = '';\n                        }\n                    } else if (typeof value !== 'string' && !this.useRawValueToEscape) {\n                        value = utils.makeString(value);\n                    }\n                    str = str.replace(match[0], todo.safeValue(value));\n                    todo.regex.lastIndex = 0;\n                    replaces++;\n                    if (replaces >= this.maxReplaces) {\n                        break;\n                    }\n                }\n            });\n            return str;\n        }\n        nest(str, fc, options = {}) {\n            let match;\n            let value;\n            let clonedOptions = { ...options };\n            clonedOptions.applyPostProcessor = false;\n            delete clonedOptions.defaultValue;\n            function handleHasOptions(key, inheritedOptions) {\n                const sep = this.nestingOptionsSeparator;\n                if (key.indexOf(sep) < 0)\n                    return key;\n                const c = key.split(new RegExp(`${ sep }[ ]*{`));\n                let optionsString = `{${ c[1] }`;\n                key = c[0];\n                optionsString = this.interpolate(optionsString, clonedOptions);\n                optionsString = optionsString.replace(/'/g, '\"');\n                try {\n                    clonedOptions = JSON.parse(optionsString);\n                    if (inheritedOptions)\n                        clonedOptions = {\n                            ...inheritedOptions,\n                            ...clonedOptions\n                        };\n                } catch (e) {\n                    this.logger.warn(`failed parsing options string in nesting for key ${ key }`, e);\n                    return `${ key }${ sep }${ optionsString }`;\n                }\n                delete clonedOptions.defaultValue;\n                return key;\n            }\n            while (match = this.nestingRegexp.exec(str)) {\n                let formatters = [];\n                let doReduce = false;\n                if (match[0].includes(this.formatSeparator) && !/{.*}/.test(match[1])) {\n                    const r = match[1].split(this.formatSeparator).map(elem => elem.trim());\n                    match[1] = r.shift();\n                    formatters = r;\n                    doReduce = true;\n                }\n                value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);\n                if (value && match[0] === str && typeof value !== 'string')\n                    return value;\n                if (typeof value !== 'string')\n                    value = utils.makeString(value);\n                if (!value) {\n                    this.logger.warn(`missed to resolve ${ match[1] } for nesting ${ str }`);\n                    value = '';\n                }\n                if (doReduce) {\n                    value = formatters.reduce((v, f) => this.format(v, f, options.lng, options), value.trim());\n                }\n                str = str.replace(match[0], value);\n                this.regexp.lastIndex = 0;\n            }\n            return str;\n        }\n    }\n    return Interpolator;\n});\ndefine('skylark-i18next/BackendConnector',[\n    './utils',\n    './logger',\n    './EventEmitter'\n], function (utils, baseLogger, EventEmitter) {\n    'use strict';\n    function remove(arr, what) {\n        let found = arr.indexOf(what);\n        while (found !== -1) {\n            arr.splice(found, 1);\n            found = arr.indexOf(what);\n        }\n    }\n    class Connector extends EventEmitter {\n        constructor(backend, store, services, options = {}) {\n            super();\n            if (utils.isIE10) {\n                EventEmitter.call(this);\n            }\n            this.backend = backend;\n            this.store = store;\n            this.services = services;\n            this.languageUtils = services.languageUtils;\n            this.options = options;\n            this.logger = baseLogger.create('backendConnector');\n            this.state = {};\n            this.queue = [];\n            if (this.backend && this.backend.init) {\n                this.backend.init(services, options.backend, options);\n            }\n        }\n        queueLoad(languages, namespaces, options, callback) {\n            const toLoad = [];\n            const pending = [];\n            const toLoadLanguages = [];\n            const toLoadNamespaces = [];\n            languages.forEach(lng => {\n                let hasAllNamespaces = true;\n                namespaces.forEach(ns => {\n                    const name = `${ lng }|${ ns }`;\n                    if (!options.reload && this.store.hasResourceBundle(lng, ns)) {\n                        this.state[name] = 2;\n                    } else if (this.state[name] < 0) {\n                    } else if (this.state[name] === 1) {\n                        if (pending.indexOf(name) < 0)\n                            pending.push(name);\n                    } else {\n                        this.state[name] = 1;\n                        hasAllNamespaces = false;\n                        if (pending.indexOf(name) < 0)\n                            pending.push(name);\n                        if (toLoad.indexOf(name) < 0)\n                            toLoad.push(name);\n                        if (toLoadNamespaces.indexOf(ns) < 0)\n                            toLoadNamespaces.push(ns);\n                    }\n                });\n                if (!hasAllNamespaces)\n                    toLoadLanguages.push(lng);\n            });\n            if (toLoad.length || pending.length) {\n                this.queue.push({\n                    pending,\n                    loaded: {},\n                    errors: [],\n                    callback\n                });\n            }\n            return {\n                toLoad,\n                pending,\n                toLoadLanguages,\n                toLoadNamespaces\n            };\n        }\n        loaded(name, err, data) {\n            const s = name.split('|');\n            const lng = s[0];\n            const ns = s[1];\n            if (err)\n                this.emit('failedLoading', lng, ns, err);\n            if (data) {\n                this.store.addResourceBundle(lng, ns, data);\n            }\n            this.state[name] = err ? -1 : 2;\n            const loaded = {};\n            this.queue.forEach(q => {\n                utils.pushPath(q.loaded, [lng], ns);\n                remove(q.pending, name);\n                if (err)\n                    q.errors.push(err);\n                if (q.pending.length === 0 && !q.done) {\n                    Object.keys(q.loaded).forEach(l => {\n                        if (!loaded[l])\n                            loaded[l] = [];\n                        if (q.loaded[l].length) {\n                            q.loaded[l].forEach(ns => {\n                                if (loaded[l].indexOf(ns) < 0)\n                                    loaded[l].push(ns);\n                            });\n                        }\n                    });\n                    q.done = true;\n                    if (q.errors.length) {\n                        q.callback(q.errors);\n                    } else {\n                        q.callback();\n                    }\n                }\n            });\n            this.emit('loaded', loaded);\n            this.queue = this.queue.filter(q => !q.done);\n        }\n        read(lng, ns, fcName, tried = 0, wait = 350, callback) {\n            if (!lng.length)\n                return callback(null, {});\n            return this.backend[fcName](lng, ns, (err, data) => {\n                if (err && data && tried < 5) {\n                    setTimeout(() => {\n                        this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);\n                    }, wait);\n                    return;\n                }\n                callback(err, data);\n            });\n        }\n        prepareLoading(languages, namespaces, options = {}, callback) {\n            if (!this.backend) {\n                this.logger.warn('No backend was added via i18next.use. Will not load resources.');\n                return callback && callback();\n            }\n            if (typeof languages === 'string')\n                languages = this.languageUtils.toResolveHierarchy(languages);\n            if (typeof namespaces === 'string')\n                namespaces = [namespaces];\n            const toLoad = this.queueLoad(languages, namespaces, options, callback);\n            if (!toLoad.toLoad.length) {\n                if (!toLoad.pending.length)\n                    callback();\n                return null;\n            }\n            toLoad.toLoad.forEach(name => {\n                this.loadOne(name);\n            });\n        }\n        load(languages, namespaces, callback) {\n            this.prepareLoading(languages, namespaces, {}, callback);\n        }\n        reload(languages, namespaces, callback) {\n            this.prepareLoading(languages, namespaces, { reload: true }, callback);\n        }\n        loadOne(name, prefix = '') {\n            const s = name.split('|');\n            const lng = s[0];\n            const ns = s[1];\n            this.read(lng, ns, 'read', undefined, undefined, (err, data) => {\n                if (err)\n                    this.logger.warn(`${ prefix }loading namespace ${ ns } for language ${ lng } failed`, err);\n                if (!err && data)\n                    this.logger.log(`${ prefix }loaded namespace ${ ns } for language ${ lng }`, data);\n                this.loaded(name, err, data);\n            });\n        }\n        saveMissing(languages, namespace, key, fallbackValue, isUpdate, options = {}) {\n            if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {\n                this.logger.warn(`did not save key \"${ key }\" as the namespace \"${ namespace }\" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');\n                return;\n            }\n            if (key === undefined || key === null || key === '')\n                return;\n            if (this.backend && this.backend.create) {\n                this.backend.create(languages, namespace, key, fallbackValue, null, {\n                    ...options,\n                    isUpdate\n                });\n            }\n            if (!languages || !languages[0])\n                return;\n            this.store.addResource(languages[0], namespace, key, fallbackValue);\n        }\n    }\n    return Connector;\n});\ndefine('skylark-i18next/defaults',[],function () {\n    'use strict';\n    function get() {\n        return {\n            debug: false,\n            initImmediate: true,\n            ns: ['translation'],\n            defaultNS: ['translation'],\n            fallbackLng: ['dev'],\n            fallbackNS: false,\n            whitelist: false,\n            nonExplicitWhitelist: false,\n            supportedLngs: false,\n            nonExplicitSupportedLngs: false,\n            load: 'all',\n            preload: false,\n            simplifyPluralSuffix: true,\n            keySeparator: '.',\n            nsSeparator: ':',\n            pluralSeparator: '_',\n            contextSeparator: '_',\n            partialBundledLanguages: false,\n            saveMissing: false,\n            updateMissing: false,\n            saveMissingTo: 'fallback',\n            saveMissingPlurals: true,\n            missingKeyHandler: false,\n            missingInterpolationHandler: false,\n            postProcess: false,\n            postProcessPassResolved: false,\n            returnNull: true,\n            returnEmptyString: true,\n            returnObjects: false,\n            joinArrays: false,\n            returnedObjectHandler: false,\n            parseMissingKeyHandler: false,\n            appendNamespaceToMissingKey: false,\n            appendNamespaceToCIMode: false,\n            overloadTranslationOptionHandler: function handle(args) {\n                var ret = {};\n                if (typeof args[1] === 'object')\n                    ret = args[1];\n                if (typeof args[1] === 'string')\n                    ret.defaultValue = args[1];\n                if (typeof args[2] === 'string')\n                    ret.tDescription = args[2];\n                if (typeof args[2] === 'object' || typeof args[3] === 'object') {\n                    var options = args[3] || args[2];\n                    Object.keys(options).forEach(function (key) {\n                        ret[key] = options[key];\n                    });\n                }\n                return ret;\n            },\n            interpolation: {\n                escapeValue: true,\n                format: (value, format, lng, options) => value,\n                prefix: '{{',\n                suffix: '}}',\n                formatSeparator: ',',\n                unescapePrefix: '-',\n                nestingPrefix: '$t(',\n                nestingSuffix: ')',\n                nestingOptionsSeparator: ',',\n                maxReplaces: 1000,\n                skipOnVariables: false\n            }\n        };\n    }\n    \n    function transformOptions(options) {\n        if (typeof options.ns === 'string')\n            options.ns = [options.ns];\n        if (typeof options.fallbackLng === 'string')\n            options.fallbackLng = [options.fallbackLng];\n        if (typeof options.fallbackNS === 'string')\n            options.fallbackNS = [options.fallbackNS];\n        if (options.whitelist) {\n            if (options.whitelist && options.whitelist.indexOf('cimode') < 0) {\n                options.whitelist = options.whitelist.concat(['cimode']);\n            }\n            options.supportedLngs = options.whitelist;\n        }\n        if (options.nonExplicitWhitelist) {\n            options.nonExplicitSupportedLngs = options.nonExplicitWhitelist;\n        }\n        if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {\n            options.supportedLngs = options.supportedLngs.concat(['cimode']);\n        }\n        return options;\n    }\n\n    return {\n        get: get,\n        transformOptions: transformOptions\n    };\n});\ndefine('skylark-i18next/i18next',[\n    './logger',\n    './EventEmitter',\n    './ResourceStore',\n    './Translator',\n    './LanguageUtils',\n    './PluralResolver',\n    './Interpolator',\n    './BackendConnector',\n    './defaults',\n    './postProcessor',\n    './utils'\n], function (baseLogger, EventEmitter, ResourceStore, Translator, LanguageUtils, PluralResolver, Interpolator, BackendConnector, defaults,  postProcessor, utils) {\n    'use strict';\n    function noop() {\n    }\n    class I18n extends EventEmitter {\n        constructor(options = {}, callback) {\n            super();\n            if (utils.isIE10) {\n                EventEmitter.call(this);\n            }\n            this.options = defaults.transformOptions(options);\n            this.services = {};\n            this.logger = baseLogger;\n            this.modules = { external: [] };\n            if (callback && !this.isInitialized && !options.isClone) {\n                if (!this.options.initImmediate) {\n                    this.init(options, callback);\n                    return this;\n                }\n                setTimeout(() => {\n                    this.init(options, callback);\n                }, 0);\n            }\n        }\n        init(options = {}, callback) {\n            if (typeof options === 'function') {\n                callback = options;\n                options = {};\n            }\n            if (options.whitelist && !options.supportedLngs) {\n                this.logger.deprecate('whitelist', 'option \"whitelist\" will be renamed to \"supportedLngs\" in the next major - please make sure to rename this option asap.');\n            }\n            if (options.nonExplicitWhitelist && !options.nonExplicitSupportedLngs) {\n                this.logger.deprecate('whitelist', 'options \"nonExplicitWhitelist\" will be renamed to \"nonExplicitSupportedLngs\" in the next major - please make sure to rename this option asap.');\n            }\n            this.options = {\n                ...defaults.get(),\n                ...this.options,\n                ...defaults.transformOptions(options)\n            };\n            this.format = this.options.interpolation.format;\n            if (!callback)\n                callback = noop;\n            function createClassOnDemand(ClassOrObject) {\n                if (!ClassOrObject)\n                    return null;\n                if (typeof ClassOrObject === 'function')\n                    return new ClassOrObject();\n                return ClassOrObject;\n            }\n            if (!this.options.isClone) {\n                if (this.modules.logger) {\n                    baseLogger.init(createClassOnDemand(this.modules.logger), this.options);\n                } else {\n                    baseLogger.init(null, this.options);\n                }\n                const lu = new LanguageUtils(this.options);\n                this.store = new ResourceStore(this.options.resources, this.options);\n                const s = this.services;\n                s.logger = baseLogger;\n                s.resourceStore = this.store;\n                s.languageUtils = lu;\n                s.pluralResolver = new PluralResolver(lu, {\n                    prepend: this.options.pluralSeparator,\n                    compatibilityJSON: this.options.compatibilityJSON,\n                    simplifyPluralSuffix: this.options.simplifyPluralSuffix\n                });\n                s.interpolator = new Interpolator(this.options);\n                s.utils = { hasLoadedNamespace: this.hasLoadedNamespace.bind(this) };\n                s.backendConnector = new BackendConnector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);\n                s.backendConnector.on('*', (event, ...args) => {\n                    this.emit(event, ...args);\n                });\n                if (this.modules.languageDetector) {\n                    s.languageDetector = createClassOnDemand(this.modules.languageDetector);\n                    s.languageDetector.init(s, this.options.detection, this.options);\n                }\n                if (this.modules.i18nFormat) {\n                    s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);\n                    if (s.i18nFormat.init)\n                        s.i18nFormat.init(this);\n                }\n                this.translator = new Translator(this.services, this.options);\n                this.translator.on('*', (event, ...args) => {\n                    this.emit(event, ...args);\n                });\n                this.modules.external.forEach(m => {\n                    if (m.init)\n                        m.init(this);\n                });\n            }\n            if (!this.modules.languageDetector && !this.options.lng) {\n                this.logger.warn('init: no languageDetector is used and no lng is defined');\n            }\n            const storeApi = [\n                'getResource',\n                'hasResourceBundle',\n                'getResourceBundle',\n                'getDataByLanguage'\n            ];\n            storeApi.forEach(fcName => {\n                this[fcName] = (...args) => this.store[fcName](...args);\n            });\n            const storeApiChained = [\n                'addResource',\n                'addResources',\n                'addResourceBundle',\n                'removeResourceBundle'\n            ];\n            storeApiChained.forEach(fcName => {\n                this[fcName] = (...args) => {\n                    this.store[fcName](...args);\n                    return this;\n                };\n            });\n            const deferred = utils.defer();\n            const load = () => {\n                this.changeLanguage(this.options.lng, (err, t) => {\n                    this.isInitialized = true;\n                    this.logger.log('initialized', this.options);\n                    this.emit('initialized', this.options);\n                    deferred.resolve(t);\n                    callback(err, t);\n                });\n            };\n            if (this.options.resources || !this.options.initImmediate) {\n                load();\n            } else {\n                setTimeout(load, 0);\n            }\n            return deferred;\n        }\n        loadResources(language, callback = noop) {\n            let usedCallback = callback;\n            let usedLng = typeof language === 'string' ? language : this.language;\n            if (typeof language === 'function')\n                usedCallback = language;\n            if (!this.options.resources || this.options.partialBundledLanguages) {\n                if (usedLng && usedLng.toLowerCase() === 'cimode')\n                    return usedCallback();\n                const toLoad = [];\n                const append = lng => {\n                    if (!lng)\n                        return;\n                    const lngs = this.services.languageUtils.toResolveHierarchy(lng);\n                    lngs.forEach(l => {\n                        if (toLoad.indexOf(l) < 0)\n                            toLoad.push(l);\n                    });\n                };\n                if (!usedLng) {\n                    const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n                    fallbacks.forEach(l => append(l));\n                } else {\n                    append(usedLng);\n                }\n                if (this.options.preload) {\n                    this.options.preload.forEach(l => append(l));\n                }\n                this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);\n            } else {\n                usedCallback(null);\n            }\n        }\n        reloadResources(lngs, ns, callback) {\n            const deferred = utils.defer();\n            if (!lngs)\n                lngs = this.languages;\n            if (!ns)\n                ns = this.options.ns;\n            if (!callback)\n                callback = noop;\n            this.services.backendConnector.reload(lngs, ns, err => {\n                deferred.resolve();\n                callback(err);\n            });\n            return deferred;\n        }\n        use(module) {\n            if (!module)\n                throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');\n            if (!module.type)\n                throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');\n            if (module.type === 'backend') {\n                this.modules.backend = module;\n            }\n            if (module.type === 'logger' || module.log && module.warn && module.error) {\n                this.modules.logger = module;\n            }\n            if (module.type === 'languageDetector') {\n                this.modules.languageDetector = module;\n            }\n            if (module.type === 'i18nFormat') {\n                this.modules.i18nFormat = module;\n            }\n            if (module.type === 'postProcessor') {\n                postProcessor.addPostProcessor(module);\n            }\n            if (module.type === '3rdParty') {\n                this.modules.external.push(module);\n            }\n            return this;\n        }\n        changeLanguage(lng, callback) {\n            this.isLanguageChangingTo = lng;\n            const deferred = utils.defer();\n            this.emit('languageChanging', lng);\n            const done = (err, l) => {\n                if (l) {\n                    this.language = l;\n                    this.languages = this.services.languageUtils.toResolveHierarchy(l);\n                    this.translator.changeLanguage(l);\n                    this.isLanguageChangingTo = undefined;\n                    this.emit('languageChanged', l);\n                    this.logger.log('languageChanged', l);\n                } else {\n                    this.isLanguageChangingTo = undefined;\n                }\n                deferred.resolve((...args) => this.t(...args));\n                if (callback)\n                    callback(err, (...args) => this.t(...args));\n            };\n            const setLng = lngs => {\n                const l = typeof lngs === 'string' ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);\n                if (l) {\n                    if (!this.language) {\n                        this.language = l;\n                        this.languages = this.services.languageUtils.toResolveHierarchy(l);\n                    }\n                    if (!this.translator.language)\n                        this.translator.changeLanguage(l);\n                    if (this.services.languageDetector)\n                        this.services.languageDetector.cacheUserLanguage(l);\n                }\n                this.loadResources(l, err => {\n                    done(err, l);\n                });\n            };\n            if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {\n                setLng(this.services.languageDetector.detect());\n            } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {\n                this.services.languageDetector.detect(setLng);\n            } else {\n                setLng(lng);\n            }\n            return deferred;\n        }\n        getFixedT(lng, ns) {\n            const fixedT = (key, opts, ...rest) => {\n                let options;\n                if (typeof opts !== 'object') {\n                    options = this.options.overloadTranslationOptionHandler([\n                        key,\n                        opts\n                    ].concat(rest));\n                } else {\n                    options = { ...opts };\n                }\n                options.lng = options.lng || fixedT.lng;\n                options.lngs = options.lngs || fixedT.lngs;\n                options.ns = options.ns || fixedT.ns;\n                return this.t(key, options);\n            };\n            if (typeof lng === 'string') {\n                fixedT.lng = lng;\n            } else {\n                fixedT.lngs = lng;\n            }\n            fixedT.ns = ns;\n            return fixedT;\n        }\n        t(...args) {\n            return this.translator && this.translator.translate(...args);\n        }\n        exists(...args) {\n            return this.translator && this.translator.exists(...args);\n        }\n        setDefaultNamespace(ns) {\n            this.options.defaultNS = ns;\n        }\n        hasLoadedNamespace(ns, options = {}) {\n            if (!this.isInitialized) {\n                this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);\n                return false;\n            }\n            if (!this.languages || !this.languages.length) {\n                this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);\n                return false;\n            }\n            const lng = this.languages[0];\n            const fallbackLng = this.options ? this.options.fallbackLng : false;\n            const lastLng = this.languages[this.languages.length - 1];\n            if (lng.toLowerCase() === 'cimode')\n                return true;\n            const loadNotPending = (l, n) => {\n                const loadState = this.services.backendConnector.state[`${ l }|${ n }`];\n                return loadState === -1 || loadState === 2;\n            };\n            if (options.precheck) {\n                const preResult = options.precheck(this, loadNotPending);\n                if (preResult !== undefined)\n                    return preResult;\n            }\n            if (this.hasResourceBundle(lng, ns))\n                return true;\n            if (!this.services.backendConnector.backend)\n                return true;\n            if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))\n                return true;\n            return false;\n        }\n        loadNamespaces(ns, callback) {\n            const deferred = utils.defer();\n            if (!this.options.ns) {\n                callback && callback();\n                return Promise.resolve();\n            }\n            if (typeof ns === 'string')\n                ns = [ns];\n            ns.forEach(n => {\n                if (this.options.ns.indexOf(n) < 0)\n                    this.options.ns.push(n);\n            });\n            this.loadResources(err => {\n                deferred.resolve();\n                if (callback)\n                    callback(err);\n            });\n            return deferred;\n        }\n        loadLanguages(lngs, callback) {\n            const deferred = utils.defer();\n            if (typeof lngs === 'string')\n                lngs = [lngs];\n            const preloaded = this.options.preload || [];\n            const newLngs = lngs.filter(lng => preloaded.indexOf(lng) < 0);\n            if (!newLngs.length) {\n                if (callback)\n                    callback();\n                return Promise.resolve();\n            }\n            this.options.preload = preloaded.concat(newLngs);\n            this.loadResources(err => {\n                deferred.resolve();\n                if (callback)\n                    callback(err);\n            });\n            return deferred;\n        }\n        dir(lng) {\n            if (!lng)\n                lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;\n            if (!lng)\n                return 'rtl';\n            const rtlLngs = [\n                'ar',\n                'shu',\n                'sqr',\n                'ssh',\n                'xaa',\n                'yhd',\n                'yud',\n                'aao',\n                'abh',\n                'abv',\n                'acm',\n                'acq',\n                'acw',\n                'acx',\n                'acy',\n                'adf',\n                'ads',\n                'aeb',\n                'aec',\n                'afb',\n                'ajp',\n                'apc',\n                'apd',\n                'arb',\n                'arq',\n                'ars',\n                'ary',\n                'arz',\n                'auz',\n                'avl',\n                'ayh',\n                'ayl',\n                'ayn',\n                'ayp',\n                'bbz',\n                'pga',\n                'he',\n                'iw',\n                'ps',\n                'pbt',\n                'pbu',\n                'pst',\n                'prp',\n                'prd',\n                'ug',\n                'ur',\n                'ydd',\n                'yds',\n                'yih',\n                'ji',\n                'yi',\n                'hbo',\n                'men',\n                'xmn',\n                'fa',\n                'jpr',\n                'peo',\n                'pes',\n                'prs',\n                'dv',\n                'sam'\n            ];\n            return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? 'rtl' : 'ltr';\n        }\n        createInstance(options = {}, callback) {\n            return new I18n(options, callback);\n        }\n        cloneInstance(options = {}, callback = noop) {\n            const mergedOptions = {\n                ...this.options,\n                ...options,\n                ...{ isClone: true }\n            };\n            const clone = new I18n(mergedOptions);\n            const membersToCopy = [\n                'store',\n                'services',\n                'language'\n            ];\n            membersToCopy.forEach(m => {\n                clone[m] = this[m];\n            });\n            clone.services = { ...this.services };\n            clone.services.utils = { hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone) };\n            clone.translator = new Translator(clone.services, clone.options);\n            clone.translator.on('*', (event, ...args) => {\n                clone.emit(event, ...args);\n            });\n            clone.init(mergedOptions, callback);\n            clone.translator.options = clone.options;\n            clone.translator.backendConnector.services.utils = { hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone) };\n            return clone;\n        }\n    }\n    return new I18n();\n});\ndefine('skylark-i18next/main',['./i18next'], function (i18next) {\n    'use strict';\n    return i18next;\n});\ndefine('skylark-i18next', ['skylark-i18next/main'], function (main) { return main; });\n\n"]}